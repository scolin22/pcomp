% 1> mini1:time_fib().
% N =     1000: time fib_hr =   0.000243, time fib_tr =   0.000115
% N =     3000: time fib_hr =   0.000771, time fib_tr =   0.000414
% N =    10000: time fib_hr =   0.005212, time fib_tr =   0.005809
% N =    30000: time fib_hr =   0.044163, time fib_tr =   0.023418
% N =   100000: time fib_hr =   0.392291, time fib_tr =   0.252214
% N =   300000: time fib_hr =   4.008604, time fib_tr =   2.208703
% We observe that using tail recursion is usually faster than using head
% recursion.
% Head recursion uses more words on the stack because a new context is
% stacked per recursive call. Tail recursion avoids this with a linear
% process by using an extra temporary variable. When more memory is used, the
% garbage collector is invoked more frequently and does more work traversing the
% stack slowing down the program.
% Source: http://www.erlang.org/doc/efficiency_guide/myths.html
